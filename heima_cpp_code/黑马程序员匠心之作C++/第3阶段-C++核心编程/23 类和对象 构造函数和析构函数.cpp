//
// Created by 16659 on 25-8-22.
//

// **析构函数语法：** `~类名(){}`
//
// 1. 析构函数，没有返回值也不写void
// 2. 函数名称与类名相同,在名称前加上符号  ~
// 3. 析构函数==不可以有参数==，因此不可以发生重载
// 4. 程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次

#include <iostream>
using namespace std;

class Person
{
public:
    // 1. 构造函数
    // 没有返回值也不写void
    // 函数名称与类名相同
    // 程序在调用对象时候会自动调用构造，无须手动调用
    // 而且只会调用一次
    // 构造函数可以有参数，因此可以发生重载
    // 构造函数的作用：初始化对象的属性
    Person()
    {
        cout << "Person的构造函数调用" << endl;
    }
    // 2. 析构函数
    // 没有返回值也不写void
    // 函数名称与类名相同,在名称前加上符号  ~
    // 析构函数==不可以有参数==，因此不可以发生重载
    // 程序在对象销毁前会自动调用析构，无须手动调用
    // 而且只会调用一次
    // 析构函数的作用：释放对象的资源
    ~Person()
    {
        cout << "Person的析构函数调用" << endl;
    }
};

void test0()
{// p是在栈上的数据
    Person p; // 创建对象p,会调用构造函数
    // 当函数执行完毕，p对象会被销毁，此时会自动调用析构函数
    // 也就是在函数执行完毕后，p对象会被销毁，析构函数会被调用
    // 这就是为什么我们在函数中创建对象p后，析构函数会被调用的原因
}

int main ()
{
    test0();

    return 0;
}